../.cache/site.json/ -> (data) => {
  // TODO: setup a static folder for these
  favicon.ico = client/favicon.ico
  apple-touch-icon.png = client/apple-touch-icon.png
  404-pie.jpg = client/404-pie.jpg
  assets = client/assets/

  // Pages
  index.html = client/$index.html.js(data)
  feed.xml = client/$feed.xml.js(data) // TODO: use origami's feed generator
  feed.json = client/$feed.json.js(data) // TODO: use origami's feed generator
  404.html = client/$404.html.js(data)
  _redirects = client/$_redirects.js(data)

  tags = {
    index.html = client/tags/$index.html.js(data)
  }
  menu = {
    index.html = client/menu/$index.html.js(data)
  }
  archive = {
    index.html = client/archive/$index.html.js(data)
    index.json = client/archive/$index.json.js(data)
  }
  about = {
    index.html = client/about/$index.html.js(data)
    internal-links = {
      index.html = client/about/$internal-links.html.js(data)
    }
    external-links = {
      index.html = client/about/$external-links.html.js(data)
    }
  }

  // These path to `/well-known/...` in the build output and then we do a
  // rewrite because netlify is apparently weird about hidden files
  // https://answers.netlify.com/t/hidden-files-removed-in-zip-deploy/8997
  well-known = {
    links = {
      index.json = js:JSON/stringify(data/externalLinks)
      404.json = js:JSON/stringify({ error: "Domain not found" })
      ...tree:map(data/externalLinks, {
        key: (item) => `${item/domain}.json`,
        value: (item) => js:JSON/stringify(tree:plain(item))
      })
    }
  }

  // Post paths by year, e.g. `/2024/slug/index.html`
  ...tree:group(data/posts, (post) => new:Date(post/date)/getFullYear())
    // Process the years
    -> (years) => tree:map(years, (year) => 
      // Process the posts in each year
      tree:map(year, { 
        // Use the slug as the key for a folder
        key: (post) => post/slug
        // Generate the HTML for each post as the index page in that folder
        value: (post) => {
          index.html: client/$posts.html.js({ site: data, post: tree:plain(post) })
        }
      })
    )
}
